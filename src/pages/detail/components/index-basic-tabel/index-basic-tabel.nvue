<template>
	<view class="px-10">
		<template v-for="(ditem, dindex) in detail">
			<temlate class="flex flex-row py-16">
				<view v-for="(kitem, kindex) in ['label', 'year', 'month', 'day', 'time']" :class="{ left: kindex === 0 }" class="item">
					<!-- GanZhi -->
					<template v-if="['gan', 'zhi'].indexOf(dindex) != -1" id="ganzhi">
						<tm-text v-if="kindex === 0" :label="ditem.label" class="text-weight-b"></tm-text>
						<view v-else class="flex flex-row flex-row-center-center">
							<view>
								<tm-text
									:color="GetGanZhiColor(ditem[kitem], dindex)"
									:font-size="44"
									:label="ditem[kitem]"
									class="text-weight-b"
								></tm-text>
							</view>
							<view class="ml-4"><tm-icon :font-size="40" :name="GetIconUrl(ditem[kitem], dindex)"></tm-icon></view>
						</view>
					</template>
					<!-- CangGan -->
					<template v-else-if="['canggan', 'fuxing'].indexOf(dindex) != -1" id="canggan">
						<tm-text v-if="kindex === 0" :label="ditem.label" class="text-weight-b"></tm-text>
						<tm-text
							v-else
							v-for="(citem, cindex) in ditem[kitem]"
							:color="dindex === 'canggan' ? GetCangGanColor(baziStore.cangganColor[kitem], cindex) : ''"
							:label="citem"
							class="text-weight-b"
						></tm-text>
					</template>
					<!-- Default -->
					<template v-else id="default">
						<tm-text :label="ditem[kitem]" class="text-weight-b"></tm-text>
					</template>
				</view>
			</temlate>
		</template>
	</view>
</template>

<script lang="ts" setup>
import { computed, reactive } from 'vue';
import { useBaziStore } from '@/store/bazi.ts';
import { TransformWuXing } from '@/tool/utils';
import { wuxingLabelList } from '@/config/data/wuxing.ts';
import { colorList as wuxingColorList } from '@/config/data/wuxing';

const baziStore = useBaziStore();

const detail = reactive({
	header: {
		label: '\\',
		year: '年柱',
		month: '月柱',
		day: '日柱',
		time: '时柱'
	},
	zhuxing: computed(() => {
		return {
			label: '主星',
			...baziStore.zhuxing
		};
	}),
	gan: computed(() => {
		return {
			label: '天干',
			...baziStore.tiangan
		};
	}),
	zhi: computed(() => {
		return {
			label: '地支',
			...baziStore.dizhi
		};
	}),
	canggan: computed(() => {
		return {
			label: '藏干',
			...baziStore.canggan
		};
	}),
	fuxing: computed(() => {
		return {
			label: '副星',
			...baziStore.fuxing
		};
	}),
	dishi: computed(() => {
		return {
			label: '星运',
			...baziStore.dishi
		};
	}),
	nayin: computed(() => {
		return {
			label: '纳音',
			...baziStore.nayin
		};
	}),
	kongwang: computed(() => {
		return {
			label: '空亡',
			...baziStore.kongwang
		};
	})
});

function GetWuXingIndex(str: string, type: string) {
	const _type = type == 'gan' ? 't' : 'd';
	return wuxingLabelList.indexOf(TransformWuXing(str, _type));
}

function GetGanZhiColor(str: string, type: string) {
	const index = GetWuXingIndex(str, type);
	return wuxingColorList[index];
}

function GetIconUrl(str: string, type: string) {
	let index = GetWuXingIndex(str, type);
	index = index == '*' ? 1 : index;
	return `/static/icon/wuxing/${index}.svg`;
}

function GetCangGanColor(arr: string[], index: number): string {
	return arr && arr.length ? arr[index] : '';
}
</script>

<style lang="scss" scoped>
.item {
	width: 22%;
	text-align: center;
}

.left {
	width: 12%;
	text-align: center;
}
</style>
