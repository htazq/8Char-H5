<template>
	<view>
		<tm-sheet :margin="[0, 0]" :padding="[20, 0]">
			<view class="flex flex-row">
				<view class="flex flex-row" style="width: 100%">
					<template v-for="(item, index) in ['年柱', '月柱', '日柱', '时柱', '大运', '流年', '流月', '流日', '流时']">
						<view v-if="index < cellNum" :class="{ 'border-l-2': index === 4 }" :style="{ width: cellItemWidth }" class="flex-1 py-10">
							<tm-text :label="item" _class="flex-col-center-center text-weight-b" color="grey-1"></tm-text>
						</view>
					</template>
				</view>
			</view>

			<view class="flex flex-row">
				<view class="flex flex-row" style="width: 100%">
					<template v-for="(item, index) in zhuxingList">
						<view :class="{ 'border-l-2': index === 4 }" :style="{ width: cellItemWidth }" class="flex-1 py-5">
							<tm-text :font-size="26" :label="item" _class="flex-col-center-center text-weight-b"></tm-text>
						</view>
					</template>
				</view>
			</view>

			<view class="flex flex-row">
				<view class="flex flex-row flex-1">
					<template v-for="(item, index) in tianganList">
						<view :class="{ 'border-l-2': index === 4 }" :style="{ width: cellItemWidth }" class="flex-1">
							<tm-text
								:color="wuxingColorList[wuxingLabelList.indexOf(LunarUtil.WU_XING_GAN[item])]"
								:font-size="40"
								:label="item"
								_class="flex-col-center-center text-weight-b"
							></tm-text>
						</view>
					</template>
				</view>
			</view>

			<view class="flex flex-row">
				<view class="flex flex-row flex-1">
					<template v-for="(item, index) in dizhiList">
						<view :class="{ 'border-l-2': index === 4 }" :style="{ width: cellItemWidth }" class="flex-1 pb-20">
							<tm-text
								:color="wuxingColorList[wuxingLabelList.indexOf(LunarUtil.WU_XING_ZHI[item])]"
								:font-size="40"
								:label="item"
								_class="flex-col-center-center text-weight-b"
							></tm-text>
						</view>
					</template>
				</view>
			</view>
		</tm-sheet>

		<view class="flex flex-row my-10 mx-20">
			<view class="flex flex-row flex-1">
				<template v-for="(item, index) in cangganList">
					<view :class="{ 'border-l-2': index === 4 }" :style="{ width: cellItemWidth }" class="flex-1">
						<tm-text
							v-for="(zitem, zindex) in item"
							:color="wuxingColorList[wuxingLabelList.indexOf(LunarUtil.WU_XING_GAN[zitem[0]])]"
							:font-size="cellCangganWidth"
							:label="zitem[0] + TransformShiShen(LunarUtil.SHI_SHEN_GAN[baziStore.tiangan.day + zitem[0]])"
							_class="flex-col-center-center text-weight-b"
						></tm-text>
					</view>
				</template>
			</view>
		</view>

		<tm-sheet :margin="[0, 0]" :padding="[20, 0]">
			<view class="flex flex-row">
				<view class="flex flex-row flex-1">
					<template v-for="(item, index) in xingyunList">
						<view :class="{ 'border-l-2': index === 4 }" :style="{ width: cellItemWidth }" class="flex-1 pt-20">
							<tm-text :font-size="20" :label="item" _class="flex-col-center-center text-weight-b"></tm-text>
						</view>
					</template>
				</view>
			</view>

			<view class="flex flex-row">
				<view class="flex flex-row flex-1">
					<template v-for="(item, index) in zizuoList">
						<view :class="{ 'border-l-2': index === 4 }" :style="{ width: cellItemWidth }" class="flex-1 pt-10">
							<tm-text :font-size="20" :label="item" _class="flex-col-center-center text-weight-b"></tm-text>
						</view>
					</template>
				</view>
			</view>

			<view class="flex flex-row">
				<view class="flex flex-row flex-1">
					<template v-for="(item, index) in kongwangList">
						<view :class="{ 'border-l-2': index === 4 }" :style="{ width: cellItemWidth }" class="flex-1 pt-10">
							<tm-text :font-size="20" :label="item" _class="flex-col-center-center text-weight-b"></tm-text>
						</view>
					</template>
				</view>
			</view>

			<view class="flex flex-row">
				<view class="flex flex-row flex-1">
					<template v-for="(item, index) in nayinList">
						<view :class="{ 'border-l-2': index === 4 }" :style="{ width: cellItemWidth }" class="flex-1 pt-10 pb-20">
							<tm-text :font-size="20" :label="item" _class="flex-col-center-center text-weight-b"></tm-text>
						</view>
					</template>
				</view>
			</view>
		</tm-sheet>
	</view>
</template>

<script lang="ts" setup>
import {computed} from "vue";
import {useUserStore} from "@/store/user";
import {useBaziStore} from "@/store/bazi";
import {useYunStore} from "@/store/yun";
import {wuxingLabelList} from '@/config/data/wuxing';
import {colorList as wuxingColorList} from "@/config/data/wuxing";
import {Solar, EightChar, LunarUtil} from "lunar-javascript";
import {DeArray, TransformShiShen} from "@/tool/utils";

const userStore = useUserStore();
const baziStore = useBaziStore();
const yunStore = useYunStore();

const cellNum = computed(() => GetCurrentRowNum());
const cellItemWidth = computed(() => 100 / GetCurrentRowNum() + "%");
const cellCangganWidth = computed(() => {
  const num = GetCurrentRowNum();
  if (num == 7) {
    return 22;
  } else if (num == 8) {
    return 21;
  } else if (num == 9) {
    return 20;
  } else {
    return 21;
  }
});

function GetCurrentRowNum() {
  const liuKeyList = {
    dayunList: "大运",
    yearList: "流年",
    monthList: "流月",
    dayList: "流日",
    timeList: "流时",
  };
  let i = 4;
  for (let key in liuKeyList) {
    if (yunStore[key].length) {
      i++;
    }
  }
  return i;
}

const GetCurrentDetail = () => {
  let time = "";
  let type = "";
  if (yunStore.timeList.length) {
    time = yunStore.dayList[yunStore.dayIndex].date;
    time = time + " " + yunStore.timeList[yunStore.timeIndex].time;
    type = "time";
  } else if (yunStore.dayList.length) {
    time = yunStore.dayList[yunStore.dayIndex].date + " 23:30";
    type = "day";
  } else if (yunStore.monthList.length) {
    const _detail = yunStore.monthList[yunStore.monthIndex];
    time = `${_detail.year}/${_detail.date} 23:30`;
    type = "month";
  }
  if (type) {
    return {
      type: type,
      detail: Solar.fromDate(new Date(time)).getLunar(),
    };
  } else {
    throw "error";
  }
};

function BaseTransformShiShen(str: string): string {
  const map: any = {
    印: "正印",
    官: "正官",
    劫: "劫财",
    伤: "伤官",
    财: "正财",
    杀: "七杀",
    枭: "偏印",
    比: "比肩",
    食: "食神",
    才: "偏财",
  };
  return map[str] ?? "";
}

function GetChangSheng(gan: string, ganIndex: number, zhiIndex: number) {
  const CHANG_SHENG_OFFSET = {
    甲: 1,
    丙: 10,
    戊: 10,
    庚: 7,
    壬: 4,
    乙: 6,
    丁: 9,
    己: 9,
    辛: 0,
    癸: 3,
  };
  const offset = CHANG_SHENG_OFFSET[gan];
  let index = offset + (ganIndex % 2 == 0 ? zhiIndex : -zhiIndex);
  if (index >= 12) {
    index -= 12;
  }
  if (index < 0) {
    index += 12;
  }
  return EightChar.CHANG_SHENG[index];
}

const zhuxingList = computed(() => {
  const list = [];
  for (let key in baziStore.zhuxing) {
    list.push(baziStore.zhuxing[key]);
  }
  const detail = GetCurrentDetail();
  list.push(
      BaseTransformShiShen(
          yunStore.dayunList[yunStore.currentIndex]?.shishen[0]
      )
  );
  list.push(
      BaseTransformShiShen(yunStore.yearList[yunStore.yearIndex]?.shishen[0])
  );
  list.push(
      BaseTransformShiShen(
          yunStore.monthList[yunStore.monthIndex]?.shishen[0]
      )
  );

  if (detail.type == "day") {
    list.push(
        BaseTransformShiShen(yunStore.dayList[yunStore.dayIndex]?.shishen[0])
    );
  } else if (detail.type == "time") {
    list.push(
        BaseTransformShiShen(yunStore.dayList[yunStore.dayIndex]?.shishen[0])
    );
    list.push(
        BaseTransformShiShen(
            yunStore.timeList[yunStore.timeIndex]?.shishen[0]
        )
    );
  }
  return list;
});

const tianganList = computed(() => {
  const list = [];
  for (let key in baziStore.tiangan) {
    list.push(baziStore.tiangan[key]);
  }
  const detail = GetCurrentDetail();
  const dayunGanzhi = yunStore.dayunList[yunStore.currentIndex]?.ganzhi;
  list.push(dayunGanzhi == "童限" ? "" : dayunGanzhi[0]);
  list.push(yunStore.yearList[yunStore.yearIndex]?.ganzhi[0]);
  list.push(yunStore.monthList[yunStore.monthIndex]?.ganzhi[0]);
  if (detail.type == "day") {
    list.push(yunStore.dayList[yunStore.dayIndex]?.ganzhi[0]);
  } else if (detail.type == "time") {
    list.push(yunStore.dayList[yunStore.dayIndex]?.ganzhi[0]);
    list.push(yunStore.timeList[yunStore.timeIndex]?.ganzhi[0]);
  }
  return list;
});

const dizhiList = computed(() => {
  const list = [];
  for (let key in baziStore.dizhi) {
    list.push(baziStore.dizhi[key]);
  }
  const detail = GetCurrentDetail();
  const dayunGanzhi = yunStore.dayunList[yunStore.currentIndex]?.ganzhi;
  list.push(dayunGanzhi == "童限" ? "" : dayunGanzhi[1]);
  list.push(yunStore.yearList[yunStore.yearIndex].ganzhi[1]);
  list.push(yunStore.monthList[yunStore.monthIndex].ganzhi[1]);
  if (detail.type == "day") {
    list.push(yunStore.dayList[yunStore.dayIndex].ganzhi[1]);
  } else if (detail.type == "time") {
    list.push(yunStore.dayList[yunStore.dayIndex].ganzhi[1]);
    list.push(yunStore.timeList[yunStore.timeIndex].ganzhi[1]);
  }
  return list;
});

const kongwangList = computed(() => {
  const list = [];
  for (let key in baziStore.kongwang) {
    list.push(baziStore.kongwang[key]);
  }
  const detail = GetCurrentDetail();
  const lunar = detail.detail;
  const bazi = lunar.getEightChar(userStore.gender, baziStore.sect);
  const dayunGanzhi = yunStore.dayunList[yunStore.currentIndex]?.ganzhi;
  list.push(dayunGanzhi == "童限" ? "" : LunarUtil.getXunKong(dayunGanzhi));

  list.push(bazi.getYearXunKong());
  list.push(bazi.getMonthXunKong());
  if (detail.type == "day") {
    list.push(bazi.getDayXunKong());
  } else if (detail.type == "time") {
    list.push(bazi.getDayXunKong());
    list.push(bazi.getTimeXunKong());
  }
  return list;
});
const xingyunList = computed(() => {
  const list = [];
  for (let key in baziStore.dishi) {
    list.push(baziStore.dishi[key]);
  }

  const solar = Solar.fromDate(new Date(userStore.timestamp));
  const lunar = solar.getLunar(userStore.gender, baziStore.sect);
  const bazi = lunar.getEightChar();

  const detail = GetCurrentDetail();
  const _lunar = detail.detail;
  const dayunGanzhi = yunStore.dayunList[yunStore.currentIndex]?.ganzhi;
  let dayunXingyun = "";
  if (dayunGanzhi != "童限") {
    let zhiIndex = 0;
    for (let i = 0, j = LunarUtil.ZHI.length; i < j; i++) {
      if (dayunGanzhi[1] === LunarUtil.ZHI[i]) {
        zhiIndex = i - 1;
        break;
      }
    }
    dayunXingyun = GetChangSheng(
        bazi.getDayGan(),
        bazi.getDayGanIndex(),
        zhiIndex
    );
  }
  list.push(dayunXingyun);

  list.push(
      GetChangSheng(
          bazi.getDayGan(),
          bazi.getDayGanIndex(),
          _lunar.getYearZhiIndexByLiChun()
      )
  );
  list.push(
      GetChangSheng(
          bazi.getDayGan(),
          bazi.getDayGanIndex(),
          _lunar.getMonthZhiIndex()
      )
  );
  if (detail.type == "day") {
    list.push(
        GetChangSheng(
            bazi.getDayGan(),
            bazi.getDayGanIndex(),
            _lunar.getDayZhiIndex()
        )
    );
  } else if (detail.type == "time") {
    list.push(
        GetChangSheng(
            bazi.getDayGan(),
            bazi.getDayGanIndex(),
            _lunar.getDayZhiIndex()
        )
    );
    list.push(
        GetChangSheng(
            bazi.getDayGan(),
            bazi.getDayGanIndex(),
            _lunar.getTimeZhiIndex()
        )
    );
  }
  return list;
});
const zizuoList = computed(() => {
  const solar = Solar.fromDate(new Date(userStore.timestamp));
  const lunar = solar.getLunar(userStore.gender, baziStore.sect);
  const bazi = lunar.getEightChar();
  const list = [
    GetChangSheng(
        bazi.getYearGan(),
        lunar.getYearGanIndexExact(),
        lunar.getYearZhiIndexExact()
    ),
    GetChangSheng(
        bazi.getMonthGan(),
        lunar.getMonthGanIndexExact(),
        lunar.getMonthZhiIndexExact()
    ),
    GetChangSheng(
        bazi.getDayGan(),
        2 == bazi.getSect()
            ? lunar.getDayGanIndexExact2()
            : lunar.getDayGanIndexExact(),
        2 == bazi.getSect()
            ? lunar.getDayZhiIndexExact2()
            : lunar.getDayZhiIndexExact()
    ),
    GetChangSheng(
        bazi.getTimeGan(),
        lunar.getTimeGanIndex(),
        lunar.getTimeZhiIndex()
    ),
  ];

  const detail = GetCurrentDetail();
  const _lunar = detail.detail;
  const dayunGanzhi = yunStore.dayunList[yunStore.currentIndex]?.ganzhi;
  let dayunZizuo = "";
  if (dayunGanzhi != "童限") {
    let ganIndex = 0;
    let zhiIndex = 0;
    for (let i = 0, j = LunarUtil.GAN.length; i < j; i++) {
      if (dayunGanzhi[0] === LunarUtil.GAN[i]) {
        ganIndex = i - 1;
        break;
      }
    }
    for (let i = 0, j = LunarUtil.ZHI.length; i < j; i++) {
      if (dayunGanzhi[1] === LunarUtil.ZHI[i]) {
        zhiIndex = i - 1;
        break;
      }
    }
    dayunZizuo = GetChangSheng(dayunGanzhi[0], ganIndex, zhiIndex);
  }
  list.push(dayunZizuo);

  list.push(
      GetChangSheng(
          _lunar.getYearGanByLiChun(),
          _lunar.getYearGanIndexByLiChun(),
          _lunar.getYearZhiIndexByLiChun()
      )
  );
  list.push(
      GetChangSheng(
          _lunar.getMonthGan(),
          _lunar.getMonthGanIndex(),
          _lunar.getMonthZhiIndex()
      )
  );
  if (detail.type == "day") {
    list.push(
        GetChangSheng(
            _lunar.getDayGan(),
            _lunar.getDayGanIndex(),
            _lunar.getDayZhiIndex()
        )
    );
  } else if (detail.type == "time") {
    list.push(
        GetChangSheng(
            _lunar.getDayGan(),
            _lunar.getDayGanIndex(),
            _lunar.getDayZhiIndex()
        )
    );
    list.push(
        GetChangSheng(
            _lunar.getTimeGan(),
            _lunar.getTimeGanIndex(),
            _lunar.getTimeZhiIndex()
        )
    );
  }
  return list;
});
const nayinList = computed(() => {
  const list = [];
  for (let key in baziStore.nayin) {
    list.push(baziStore.nayin[key]);
  }
  const detail = GetCurrentDetail();
  const lunar = detail.detail;
  const bazi = lunar.getEightChar(userStore.gender, baziStore.sect);
  const dayunGanzhi = yunStore.dayunList[yunStore.currentIndex]?.ganzhi;
  let dayunXingyun = "";
  if (dayunGanzhi != "童限") {
    dayunXingyun = LunarUtil.NAYIN[dayunGanzhi];
  }
  list.push(dayunXingyun);

  list.push(bazi.getYearNaYin());
  list.push(bazi.getMonthNaYin());
  if (detail.type == "day") {
    list.push(bazi.getDayNaYin());
  } else if (detail.type == "time") {
    list.push(bazi.getDayNaYin());
    list.push(bazi.getTimeNaYin());
  }
  return list;
});
const cangganList = computed(() => {
  const list = [];
  for (let key in baziStore.canggan) {
    list.push(baziStore.canggan[key]);
  }
  const detail = GetCurrentDetail();
  const lunar = detail.detail;
  const bazi = lunar.getEightChar(userStore.gender, baziStore.sect);
  const dayunGanzhi = yunStore.dayunList[yunStore.currentIndex]?.ganzhi;
  let dayunFuxing = [];
  if (dayunGanzhi != "童限") {
    dayunFuxing = LunarUtil.ZHI_HIDE_GAN[dayunGanzhi[1]];
    for (let index in dayunFuxing) {
      dayunFuxing[index] =
          dayunFuxing[index] + LunarUtil.WU_XING_GAN[dayunFuxing[index]];
    }
  }
  list.push(dayunFuxing);

  list.push(DeArray(bazi.getYearHideGan(), "canggan", true));
  list.push(DeArray(bazi.getMonthHideGan(), "canggan", true));
  if (detail.type == "day") {
    list.push(DeArray(bazi.getDayHideGan(), "canggan", true));
  } else if (detail.type == "time") {
    list.push(DeArray(bazi.getDayHideGan(), "canggan", true));
    list.push(DeArray(bazi.getTimeHideGan(), "canggan", true));
  }
  return list;
});
</script>
