<template>
	<tm-app>
		<yx-nav-header></yx-nav-header>
		<yx-top-header></yx-top-header>

		<tm-sheet :round="3" :shadow="2" :margin="[32, 30]">
			<tm-input v-model="realname" :margin="[0, 24]" placeholder="请输入姓名" prefix="tmicon-md-person"></tm-input>

			<tm-row>
				<tm-col class="flex-3" :height="100">
					<tm-radio-group v-model="gender">
						<tm-radio label="男" :value="0"></tm-radio>
						<tm-radio label="女" :value="1"></tm-radio>
					</tm-radio-group>
				</tm-col>
				<tm-col class="flex-9" :height="100">
					<tm-segtab
						:width="360"
						:margin="[20, 10]"
						v-model="model"
						:default-value="0"
						:list="[{ text: '阴历' }, { text: '四柱' }]"
					></tm-segtab>
				</tm-col>
			</tm-row>

			<tm-input
				disabled
				placeholder="请选择时间"
				prefix="tmicon-calendar-alt"
				v-model="datetime_label"
				:margin="[0, 12]"
				@tap="SelectTime"
			></tm-input>

			<tm-input :margin="[0, 12]" prefix="tmicon-integral" disabled v-if="lunar_label" v-model="lunar_label"></tm-input>

			<tm-button block label="开始排盘" @tap="Sumbit"></tm-button>
			<yxn-pillar-picker
				v-model:show="pillar_select_show"
				:default-value="pillar_default_value"
				@Confirm="PillarConfirm"
			></yxn-pillar-picker>

			<tm-time-picker
				v-model:show="solar_select_show"
				:round="6"
				:default-value="solar_default_value"
				:height="100"
				:start="time_pick.start"
				:end="time_pick.end"
				:format="time_pick.format"
				:showDetail="time_pick.detail"
				@confirm="SolarConfirm"
			></tm-time-picker>
		</tm-sheet>

		<yx-friend></yx-friend>
	</tm-app>
</template>

<script lang="ts" setup>
import { ref, watch,nextTick } from 'vue';
import { onLoad } from '@dcloudio/uni-app';
import { Solar, Lunar } from 'lunar-javascript';
import {useUserStore} from '@/store/user.ts'
import {useBaziStore} from '@/store/bazi.ts'
import utils from '@/tool/utils.ts';

let realname = ref('');
let gender = ref(0);
let model = ref(0);
let timestamp = ref(null);
let datetime_label = ref('');
let lunar_label = ref(null);

const user_store = useUserStore();
const bazi_store = useBaziStore();

let solar_select_show = ref(false);
let pillar_select_show = ref(false);

let solar_default_value = ref("")
let pillar_default_value = ref("");

const time_pick = {
	start: '1900/01/01 00:00',
	end: '2099/12/30 00:00',
	format: 'YYYY/MM/DD hh:MM',
	detail: {
		year: true,
		month: true,
		day: true,
		hour: true,
		minute: true,
		second: false
	}
};

watch(model, () => PullDatatimeLabel());
watch(timestamp, () => PullDatatimeLabel());
onLoad(() =>{
	const cache = uni.getStorageSync('info');
	if (cache) {
		let data = null
		try {
			data = JSON.parse(cache);
			realname.value = data.realname
			gender.value = data.gender== 0 ? 1 : 0
			timestamp.value = data.timestamp
			PullDatatimeLabel()
		} catch (e) {
			uni.removeStorageSync('info');
		}
	}
})

function SelectTime  ()  {
	const type = model.value;
	uni.hideKeyboard();
	setTimeout(()=>{
		if (type === 0) {
			solar_select_show.value = true;
			nextTick()
		} else if (type === 1) {
			pillar_select_show.value = true;
		}
	},400)
};

const SolarConfirm = time => timestamp.value = new Date(time).getTime();
const PillarConfirm = e => {
	timestamp.value = e.value;
	pillar_select_show.value = false;
}

function PullDatatimeLabel  ()  {
	const time = timestamp.value;
	if (time === null) return;
	const index = model.value;
	const solar = Solar.fromDate(new Date(time));
	const lunar = solar.getLunar();
	lunar_label.value = `${lunar.toString()} ${lunar.getTimeZhi()}时`;
	if (index === 0) {
		let date = utils.HideSecond(time);
		datetime_label.value = date;
		solar_default_value.value = date
	} else {
		const bazi = lunar.getEightChar();
		const list = [bazi.getYear(), bazi.getMonth(), bazi.getDay(), bazi.getTime()];
		datetime_label.value = list.join(' ');
		pillar_default_value.value = [
			bazi.getYear()[0],
			bazi.getMonth()[0],
			bazi.getDay()[0],
			bazi.getTime()[0],
			bazi.getYear()[1],
			bazi.getMonth()[1],
			bazi.getDay()[1],
			bazi.getTime()[1],
		].join('');
	}
};

function Sumbit ()  {
	const datetime = timestamp.value;
	if(datetime === null){
		SelectTime();
		return;
	}

	const params = {
		realname: realname.value??"不知名网友",
		timestamp: datetime,
		gender: gender.value == 0 ? 1 : 0
	}
	uni.showLoading({
		title:"排盘中，请稍后！"
	})
	uni.setStorageSync('info', JSON.stringify(params));
	user_store.set(params)
	bazi_store.pull(params);
	setTimeout(()=>{
		uni.hideLoading()
		uni.navigateTo({
			url:"/pages/index/detail"
		})
	},0)
};
</script>
